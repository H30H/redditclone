// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import session "redditclone/pkg/session"
import time "time"

// DatabaseSession is an autogenerated mock type for the DatabaseSession type
type DatabaseSession struct {
	mock.Mock
}

// AddToken provides a mock function with given fields: token, _a1
func (_m *DatabaseSession) AddToken(token string, _a1 int64) error {
	ret := _m.Called(token, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = rf(token, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *DatabaseSession) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *DatabaseSession) GetAll() ([]*session.DatabaseRow, error) {
	ret := _m.Called()

	var r0 []*session.DatabaseRow
	if rf, ok := ret.Get(0).(func() []*session.DatabaseRow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*session.DatabaseRow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTime provides a mock function with given fields: token
func (_m *DatabaseSession) GetTime(token string) (int64, error) {
	ret := _m.Called(token)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveToken provides a mock function with given fields: token
func (_m *DatabaseSession) RemoveToken(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAuth provides a mock function with given fields: token, timeTo
func (_m *DatabaseSession) UpdateAuth(token string, timeTo time.Time) error {
	ret := _m.Called(token, timeTo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Time) error); ok {
		r0 = rf(token, timeTo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
