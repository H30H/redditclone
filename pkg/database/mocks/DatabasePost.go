// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import options "go.mongodb.org/mongo-driver/mongo/options"
import post "redditclone/pkg/post"

// DatabasePost is an autogenerated mock type for the DatabasePost type
type DatabasePost struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *DatabasePost) Delete(id uint64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id, pst
func (_m *DatabasePost) Find(id uint64, pst *post.Post) error {
	ret := _m.Called(id, pst)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, *post.Post) error); ok {
		r0 = rf(id, pst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: filter, opts
func (_m *DatabasePost) GetAll(filter interface{}, opts ...*options.FindOptions) ([]*post.Post, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*post.Post
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.FindOptions) []*post.Post); ok {
		r0 = rf(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*post.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: pst
func (_m *DatabasePost) Insert(pst post.Post) error {
	ret := _m.Called(pst)

	var r0 error
	if rf, ok := ret.Get(0).(func(post.Post) error); ok {
		r0 = rf(pst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Replace provides a mock function with given fields: pst
func (_m *DatabasePost) Replace(pst post.Post) error {
	ret := _m.Called(pst)

	var r0 error
	if rf, ok := ret.Get(0).(func(post.Post) error); ok {
		r0 = rf(pst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
