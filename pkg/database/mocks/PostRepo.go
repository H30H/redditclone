// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import post "redditclone/pkg/post"

// PostRepo is an autogenerated mock type for the PostRepo type
type PostRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: pst
func (_m *PostRepo) Add(pst *post.Post) error {
	ret := _m.Called(pst)

	var r0 error
	if rf, ok := ret.Get(0).(func(*post.Post) error); ok {
		r0 = rf(pst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *PostRepo) Find(id uint64) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *PostRepo) Get(id uint64) (post.Post, error) {
	ret := _m.Called(id)

	var r0 post.Post
	if rf, ok := ret.Get(0).(func(uint64) post.Post); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(post.Post)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lock provides a mock function with given fields: id
func (_m *PostRepo) Lock(id uint64) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: id
func (_m *PostRepo) Remove(id uint64) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ToJson provides a mock function with given fields: category, username
func (_m *PostRepo) ToJson(category string, username string) ([]byte, error) {
	ret := _m.Called(category, username)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(category, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(category, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unlock provides a mock function with given fields: id
func (_m *PostRepo) Unlock(id uint64) bool {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint64) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Update provides a mock function with given fields: pst
func (_m *PostRepo) Update(pst post.Post) error {
	ret := _m.Called(pst)

	var r0 error
	if rf, ok := ret.Get(0).(func(post.Post) error); ok {
		r0 = rf(pst)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getUserID provides a mock function with given fields: username
func (_m *PostRepo) getUserID(username string) int64 {
	ret := _m.Called(username)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}
